import * as R from 'ramda'

export const getGoodById = (state, id) => R.prop(id, state.goods)

export const getGoods = (state, ownProps) => {
    const activeCategoryId = getActiveCategoryId(ownProps)
    const applySearch = item => R.contains(
        state.goodsPage.search,
        R.prop('name', item)
    )
    const applyCategory = item => R.equals(
        activeCategoryId,
        R.prop('categoryId', item)
    )
    const goods = R.compose(
        R.filter(applySearch),
        R.when(R.always(activeCategoryId), R.filter(applyCategory)),
        R.map(id => getGoodById(state, id))
    )(state.goodsPage.ids)
     return goods;
}

export const getRenderedGoodsLength = state => R.length(state.goodsPage.ids)

export const getTotalBasketCount = state => R.length(state.basket)

export const getTotalBasketPrice = state => {
    const totalPrice = R.compose(
        R.sum,
        R.pluck('price'),
        R.map(id => getGoodById(state, id)),
    )(state.basket)
    return totalPrice
}

export const getCategories = state => R.values(state.categories)

export const getActiveCategoryId = ownProps => R.path(['match', 'params', 'id'], ownProps)

export const getBasketGoodsWithCount = state => {
    const goodCount = id => R.compose(
        R.length,
        R.filter(basketId => R.equals(id, basketId))
    )(state.basket)
    const goodsWithCount = good => R.assoc('count', goodCount(good.id), good)
    const uniqueIds = R.uniq(state.basket)
    const goods = R.compose(
        R.map(goodsWithCount),
        R.map(id => getGoodById(state, id))
    )(uniqueIds)

    return goods
}